# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetPolicyDocumentStatementResult',
]

@pulumi.output_type
class GetPolicyDocumentStatementResult(dict):
    def __init__(__self__, *,
                 actions: Optional[Sequence[str]] = None):
        GetPolicyDocumentStatementResult.__configure__(
            actions=actions,
            __setter=lambda key, value: pulumi.set(__self__, key, value),
        )
    @staticmethod
    def __configure__(*,
             actions: Optional[Sequence[str]] = None,
             __setter=lambda key, value: ...):
        if actions is not None:
            __setter("actions", actions)

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "actions")


