# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'Baz',
]

@pulumi.input_type
class Baz:
    def __init__(__self__, *,
                 hello: Optional[str] = None,
                 world: Optional[str] = None):
        Baz.__configure__(
            hello=hello,
            world=world,
            __setter=lambda key, value: pulumi.set(__self__, key, value),
        )
    @staticmethod
    def __configure__(*,
             hello: Optional[str] = None,
             world: Optional[str] = None,
             __setter=lambda key, value: ...):
        if hello is not None:
            __setter("hello", hello)
        if world is not None:
            __setter("world", world)

    @property
    @pulumi.getter
    def hello(self) -> Optional[str]:
        return pulumi.get(self, "hello")

    @hello.setter
    def hello(self, value: Optional[str]):
        pulumi.set(self, "hello", value)

    @property
    @pulumi.getter
    def world(self) -> Optional[str]:
        return pulumi.get(self, "world")

    @world.setter
    def world(self, value: Optional[str]):
        pulumi.set(self, "world", value)


