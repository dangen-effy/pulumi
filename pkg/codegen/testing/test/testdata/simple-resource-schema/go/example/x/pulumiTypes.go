// Code generated by test DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package example

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	pux "github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"simple-resource-schema/example/internal"
)

var _ = internal.GetEnvOrDefault

type ConfigMap struct {
	Config *string `pulumi:"config"`
}

type ConfigMapArgs struct {
	Config pulumi.Input[*string] `pulumi:"config"`
}

func (ConfigMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigMap)(nil)).Elem()
}

func (i ConfigMapArgs) ToConfigMapOutput() ConfigMapOutput {
	return i.ToConfigMapOutputWithContext(context.Background())
}

func (i ConfigMapArgs) ToConfigMapOutputWithContext(ctx context.Context) ConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigMapOutput)
}

func (i ConfigMapArgs) ToOutput(ctx context.Context) pulumix.Output[ConfigMap] {
	return pulumix.Output[ConfigMap]{
		OutputState: i.ToConfigMapOutputWithContext(ctx).OutputState,
	}
}

type ConfigMapOutput struct{ *pulumi.OutputState }

func (ConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigMap)(nil)).Elem()
}

func (o ConfigMapOutput) ToConfigMapOutput() ConfigMapOutput {
	return o
}

func (o ConfigMapOutput) ToConfigMapOutputWithContext(ctx context.Context) ConfigMapOutput {
	return o
}

func (o ConfigMapOutput) ToOutput(ctx context.Context) pulumix.Output[ConfigMap] {
	return pulumix.Output[ConfigMap]{
		OutputState: o.OutputState,
	}
}

func (o ConfigMapOutput) Config() pux.Output[*string] {
	return pux.Apply(o, func(v ConfigMap) pux.Output[*string] { return v.Config })
}

type Object struct {
	Bar     *string     `pulumi:"bar"`
	Configs []ConfigMap `pulumi:"configs"`
	Foo     *Resource   `pulumi:"foo"`
	// List of lists of other objects
	Others [][]SomeOtherObject `pulumi:"others"`
	// Mapping from string to list of some other object
	StillOthers map[string][]SomeOtherObject `pulumi:"stillOthers"`
}

type ObjectArgs struct {
	Bar     pulumi.Input[*string]          `pulumi:"bar"`
	Configs pulumi.Input[[]*ConfigMapArgs] `pulumi:"configs"`
	Foo     pulumi.Input[*Resource]        `pulumi:"foo"`
	// List of lists of other objects
	Others pulumi.Input[[][]*SomeOtherObjectArgs] `pulumi:"others"`
	// Mapping from string to list of some other object
	StillOthers pulumi.Input[*map[string][]*SomeOtherObjectArgs] `pulumi:"stillOthers"`
}

func (ObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Object)(nil)).Elem()
}

func (i ObjectArgs) ToObjectOutput() ObjectOutput {
	return i.ToObjectOutputWithContext(context.Background())
}

func (i ObjectArgs) ToObjectOutputWithContext(ctx context.Context) ObjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectOutput)
}

func (i ObjectArgs) ToOutput(ctx context.Context) pulumix.Output[Object] {
	return pulumix.Output[Object]{
		OutputState: i.ToObjectOutputWithContext(ctx).OutputState,
	}
}

type ObjectOutput struct{ *pulumi.OutputState }

func (ObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Object)(nil)).Elem()
}

func (o ObjectOutput) ToObjectOutput() ObjectOutput {
	return o
}

func (o ObjectOutput) ToObjectOutputWithContext(ctx context.Context) ObjectOutput {
	return o
}

func (o ObjectOutput) ToOutput(ctx context.Context) pulumix.Output[Object] {
	return pulumix.Output[Object]{
		OutputState: o.OutputState,
	}
}

func (o ObjectOutput) Bar() pux.Output[*string] {
	return pux.Apply(o, func(v Object) pux.Output[*string] { return v.Bar })
}

func (o ObjectOutput) Configs() pux.Output[interface{}] {
	return pux.Apply(o, func(v Object) pux.Output[interface{}] { return v.Configs })
}

func (o ObjectOutput) Foo() pux.GPtrOutput[Resource, ResourceOutput] {
	return pux.Apply(o, func(v Object) pux.GPtrOutput[Resource, ResourceOutput] { return v.Foo })
}

// List of lists of other objects
func (o ObjectOutput) Others() pux.Output[interface{}] {
	return pux.Apply(o, func(v Object) pux.Output[interface{}] { return v.Others })
}

// Mapping from string to list of some other object
func (o ObjectOutput) StillOthers() pux.Output[interface{}] {
	return pux.Apply(o, func(v Object) pux.Output[interface{}] { return v.StillOthers })
}

type ObjectWithNodeOptionalInputs struct {
	Bar *int   `pulumi:"bar"`
	Foo string `pulumi:"foo"`
}

type ObjectWithNodeOptionalInputsArgs struct {
	Bar pulumi.Input[*int]    `pulumi:"bar"`
	Foo pulumi.Input[*string] `pulumi:"foo"`
}

func (ObjectWithNodeOptionalInputsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectWithNodeOptionalInputs)(nil)).Elem()
}

func (i ObjectWithNodeOptionalInputsArgs) ToObjectWithNodeOptionalInputsOutput() ObjectWithNodeOptionalInputsOutput {
	return i.ToObjectWithNodeOptionalInputsOutputWithContext(context.Background())
}

func (i ObjectWithNodeOptionalInputsArgs) ToObjectWithNodeOptionalInputsOutputWithContext(ctx context.Context) ObjectWithNodeOptionalInputsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectWithNodeOptionalInputsOutput)
}

func (i ObjectWithNodeOptionalInputsArgs) ToOutput(ctx context.Context) pulumix.Output[ObjectWithNodeOptionalInputs] {
	return pulumix.Output[ObjectWithNodeOptionalInputs]{
		OutputState: i.ToObjectWithNodeOptionalInputsOutputWithContext(ctx).OutputState,
	}
}

type ObjectWithNodeOptionalInputsOutput struct{ *pulumi.OutputState }

func (ObjectWithNodeOptionalInputsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectWithNodeOptionalInputs)(nil)).Elem()
}

func (o ObjectWithNodeOptionalInputsOutput) ToObjectWithNodeOptionalInputsOutput() ObjectWithNodeOptionalInputsOutput {
	return o
}

func (o ObjectWithNodeOptionalInputsOutput) ToObjectWithNodeOptionalInputsOutputWithContext(ctx context.Context) ObjectWithNodeOptionalInputsOutput {
	return o
}

func (o ObjectWithNodeOptionalInputsOutput) ToOutput(ctx context.Context) pulumix.Output[ObjectWithNodeOptionalInputs] {
	return pulumix.Output[ObjectWithNodeOptionalInputs]{
		OutputState: o.OutputState,
	}
}

func (o ObjectWithNodeOptionalInputsOutput) Bar() pux.Output[*int] {
	return pux.Apply(o, func(v ObjectWithNodeOptionalInputs) pux.Output[*int] { return v.Bar })
}

func (o ObjectWithNodeOptionalInputsOutput) Foo() string {
	return pux.Apply(o, func(v ObjectWithNodeOptionalInputs) string { return v.Foo })
}

type OtherResourceOutputType struct {
	Foo *string `pulumi:"foo"`
}

type OtherResourceOutputTypeArgs struct {
	Foo pulumi.Input[*string] `pulumi:"foo"`
}

func (OtherResourceOutputTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OtherResourceOutputType)(nil)).Elem()
}

func (i OtherResourceOutputTypeArgs) ToOtherResourceOutputTypeOutput() OtherResourceOutputTypeOutput {
	return i.ToOtherResourceOutputTypeOutputWithContext(context.Background())
}

func (i OtherResourceOutputTypeArgs) ToOtherResourceOutputTypeOutputWithContext(ctx context.Context) OtherResourceOutputTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OtherResourceOutputTypeOutput)
}

func (i OtherResourceOutputTypeArgs) ToOutput(ctx context.Context) pulumix.Output[OtherResourceOutputType] {
	return pulumix.Output[OtherResourceOutputType]{
		OutputState: i.ToOtherResourceOutputTypeOutputWithContext(ctx).OutputState,
	}
}

type OtherResourceOutputTypeOutput struct{ *pulumi.OutputState }

func (OtherResourceOutputTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OtherResourceOutputType)(nil)).Elem()
}

func (o OtherResourceOutputTypeOutput) ToOtherResourceOutputTypeOutput() OtherResourceOutputTypeOutput {
	return o
}

func (o OtherResourceOutputTypeOutput) ToOtherResourceOutputTypeOutputWithContext(ctx context.Context) OtherResourceOutputTypeOutput {
	return o
}

func (o OtherResourceOutputTypeOutput) ToOutput(ctx context.Context) pulumix.Output[OtherResourceOutputType] {
	return pulumix.Output[OtherResourceOutputType]{
		OutputState: o.OutputState,
	}
}

func (o OtherResourceOutputTypeOutput) Foo() pux.Output[*string] {
	return pux.Apply(o, func(v OtherResourceOutputType) pux.Output[*string] { return v.Foo })
}

type SomeOtherObject struct {
	Baz *string `pulumi:"baz"`
}

type SomeOtherObjectArgs struct {
	Baz pulumi.Input[*string] `pulumi:"baz"`
}

func (SomeOtherObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SomeOtherObject)(nil)).Elem()
}

func (i SomeOtherObjectArgs) ToSomeOtherObjectOutput() SomeOtherObjectOutput {
	return i.ToSomeOtherObjectOutputWithContext(context.Background())
}

func (i SomeOtherObjectArgs) ToSomeOtherObjectOutputWithContext(ctx context.Context) SomeOtherObjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SomeOtherObjectOutput)
}

func (i SomeOtherObjectArgs) ToOutput(ctx context.Context) pulumix.Output[SomeOtherObject] {
	return pulumix.Output[SomeOtherObject]{
		OutputState: i.ToSomeOtherObjectOutputWithContext(ctx).OutputState,
	}
}

type SomeOtherObjectOutput struct{ *pulumi.OutputState }

func (SomeOtherObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SomeOtherObject)(nil)).Elem()
}

func (o SomeOtherObjectOutput) ToSomeOtherObjectOutput() SomeOtherObjectOutput {
	return o
}

func (o SomeOtherObjectOutput) ToSomeOtherObjectOutputWithContext(ctx context.Context) SomeOtherObjectOutput {
	return o
}

func (o SomeOtherObjectOutput) ToOutput(ctx context.Context) pulumix.Output[SomeOtherObject] {
	return pulumix.Output[SomeOtherObject]{
		OutputState: o.OutputState,
	}
}

func (o SomeOtherObjectOutput) Baz() pux.Output[*string] {
	return pux.Apply(o, func(v SomeOtherObject) pux.Output[*string] { return v.Baz })
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigMapInput)(nil)).Elem(), ConfigMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigMapArrayInput)(nil)).Elem(), ConfigMapArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectInput)(nil)).Elem(), ObjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectPtrInput)(nil)).Elem(), ObjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectWithNodeOptionalInputsInput)(nil)).Elem(), ObjectWithNodeOptionalInputsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectWithNodeOptionalInputsPtrInput)(nil)).Elem(), ObjectWithNodeOptionalInputsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OtherResourceOutputTypeInput)(nil)).Elem(), OtherResourceOutputTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SomeOtherObjectInput)(nil)).Elem(), SomeOtherObjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SomeOtherObjectPtrInput)(nil)).Elem(), SomeOtherObjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SomeOtherObjectArrayInput)(nil)).Elem(), SomeOtherObjectArray{})
	pulumi.RegisterOutputType(ConfigMapOutput{})
	pulumi.RegisterOutputType(ConfigMapArrayOutput{})
	pulumi.RegisterOutputType(ObjectOutput{})
	pulumi.RegisterOutputType(ObjectPtrOutput{})
	pulumi.RegisterOutputType(ObjectWithNodeOptionalInputsOutput{})
	pulumi.RegisterOutputType(ObjectWithNodeOptionalInputsPtrOutput{})
	pulumi.RegisterOutputType(OtherResourceOutputTypeOutput{})
	pulumi.RegisterOutputType(SomeOtherObjectOutput{})
	pulumi.RegisterOutputType(SomeOtherObjectPtrOutput{})
	pulumi.RegisterOutputType(SomeOtherObjectArrayOutput{})
}
