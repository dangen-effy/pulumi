// Code generated by test DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package example

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"simple-resource-schema/example/internal"
)

type OtherResource struct {
	pulumi.ResourceState

	Foo pulumix.GPtrOutput[Resource, ResourceOutput] `pulumi:"foo"`
}

// NewOtherResource registers a new resource with the given unique name, arguments, and options.
func NewOtherResource(ctx *pulumi.Context,
	name string, args *OtherResourceArgs, opts ...pulumi.ResourceOption) (*OtherResource, error) {
	if args == nil {
		args = &OtherResourceArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OtherResource
	err := ctx.RegisterRemoteComponentResource("example::OtherResource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type otherResourceArgs struct {
	Foo pulumi.Input[Resource] `pulumi:"foo"`
}

// The set of arguments for constructing a OtherResource resource.
type OtherResourceArgs struct {
	Foo pulumi.Input[*Resource]
}

func (OtherResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*otherResourceArgs)(nil)).Elem()
}

type OtherResourceOutput struct{ *pulumi.OutputState }

func (OtherResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OtherResource)(nil)).Elem()
}

func (o OtherResourceOutput) ToOtherResourceOutput() OtherResourceOutput {
	return o
}

func (o OtherResourceOutput) ToOtherResourceOutputWithContext(ctx context.Context) OtherResourceOutput {
	return o
}

func (o OtherResourceOutput) ToOutput(ctx context.Context) pulumix.Output[*OtherResource] {
	return pulumix.Output[*OtherResource]{
		OutputState: o.OutputState,
	}
}

func (o OtherResourceOutput) Foo() pulumix.GPtrOutput[Resource, ResourceOutput] {
	return pulumix.Join(o, func(v *OtherResource) pulumix.GPtrOutput[Resource, ResourceOutput] { return v.Foo })
}

func init() {
	pulumi.RegisterOutputType(OtherResourceOutput{})
}
