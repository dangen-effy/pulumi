// Code generated by test DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package example

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	pux "github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"simple-resource-schema/example/internal"
)

type TypeUses struct {
	pulumi.CustomResourceState

	Bar pux.GPtrOutput[SomeOtherObject, SomeOtherObjectOutput]                           `pulumi:"bar"`
	Baz pux.GPtrOutput[ObjectWithNodeOptionalInputs, ObjectWithNodeOptionalInputsOutput] `pulumi:"baz"`
	Foo pux.GPtrOutput[Object, ObjectOutput]                                             `pulumi:"foo"`
}

// NewTypeUses registers a new resource with the given unique name, arguments, and options.
func NewTypeUses(ctx *pulumi.Context,
	name string, args *TypeUsesArgs, opts ...pulumi.ResourceOption) (*TypeUses, error) {
	if args == nil {
		args = &TypeUsesArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TypeUses
	err := ctx.RegisterResource("example::TypeUses", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTypeUses gets an existing TypeUses resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTypeUses(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TypeUsesState, opts ...pulumi.ResourceOption) (*TypeUses, error) {
	var resource TypeUses
	err := ctx.ReadResource("example::TypeUses", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TypeUses resources.
type typeUsesState struct {
}

type TypeUsesState struct {
}

func (TypeUsesState) ElementType() reflect.Type {
	return reflect.TypeOf((*typeUsesState)(nil)).Elem()
}

type typeUsesArgs struct {
	Bar pulumi.Input[*SomeOtherObject]              `pulumi:"bar"`
	Baz pulumi.Input[*ObjectWithNodeOptionalInputs] `pulumi:"baz"`
	Foo pulumi.Input[*Object]                       `pulumi:"foo"`
}

// The set of arguments for constructing a TypeUses resource.
type TypeUsesArgs struct {
	Bar pulumi.Input[**SomeOtherObjectArgs]
	Baz pulumi.Input[**ObjectWithNodeOptionalInputsArgs]
	Foo pulumi.Input[**ObjectArgs]
}

func (TypeUsesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*typeUsesArgs)(nil)).Elem()
}

type TypeUsesOutput struct{ *pulumi.OutputState }

func (TypeUsesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TypeUses)(nil)).Elem()
}

func (o TypeUsesOutput) ToTypeUsesOutput() TypeUsesOutput {
	return o
}

func (o TypeUsesOutput) ToTypeUsesOutputWithContext(ctx context.Context) TypeUsesOutput {
	return o
}

func (o TypeUsesOutput) ToOutput(ctx context.Context) pulumix.Output[*TypeUses] {
	return pulumix.Output[*TypeUses]{
		OutputState: o.OutputState,
	}
}

func (o TypeUsesOutput) Bar() pux.GPtrOutput[SomeOtherObject, SomeOtherObjectOutput] {
	return pux.Apply(o, func(v *TypeUses) pux.GPtrOutput[SomeOtherObject, SomeOtherObjectOutput] { return v.Bar })
}

func (o TypeUsesOutput) Baz() pux.GPtrOutput[ObjectWithNodeOptionalInputs, ObjectWithNodeOptionalInputsOutput] {
	return pux.Apply(o, func(v *TypeUses) pux.GPtrOutput[ObjectWithNodeOptionalInputs, ObjectWithNodeOptionalInputsOutput] {
		return v.Baz
	})
}

func (o TypeUsesOutput) Foo() pux.GPtrOutput[Object, ObjectOutput] {
	return pux.Apply(o, func(v *TypeUses) pux.GPtrOutput[Object, ObjectOutput] { return v.Foo })
}

func init() {
	pulumi.RegisterOutputType(TypeUsesOutput{})
}
