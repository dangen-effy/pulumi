// Code generated by test DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package example

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"simple-resource-schema/example/internal"
)

func ArgFunction(ctx *pulumi.Context, args *ArgFunctionArgs, opts ...pulumi.InvokeOption) (*ArgFunctionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv ArgFunctionResult
	err := ctx.Invoke("example::argFunction", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type ArgFunctionArgs struct {
	Arg1 *Resource `pulumi:"arg1"`
}

type ArgFunctionResult struct {
	Result *Resource `pulumi:"result"`
}

func ArgFunctionOutput(ctx *pulumi.Context, args ArgFunctionOutputArgs, opts ...pulumi.InvokeOption) pulumix.Output[ArgFunctionResult] {
	return pulumix.Apply(args.ToOutput(), func(plainArgs ArgFunctionArgs) (ArgFunctionResult, error) {
		r, err := ArgFunction(ctx, &plainArgs, opts...)
		var s ArgFunctionResult
		if r != nil {
			s = *r
		}
		return s, err
	})
}

type ArgFunctionOutputArgs struct {
	Arg1 pulumi.Input[*Resource] `pulumi:"arg1"`
}

func (args ArgFunctionOutputArgs) ToOutput() pulumix.Output[ArgFunctionArgs] {
	allArgs := pulumix.All(args.Arg1)
	return pulumix.Apply(allArgs, func(resolvedArgs []interface{}) ArgFunctionArgs {
		return ArgFunctionArgs{
			Arg1: resolvedArgs[0].(*Resource),
		}
	})
}
