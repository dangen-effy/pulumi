// Copyright 2016-2023, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "google/protobuf/empty.proto";

package pulumirpc;

option go_package = "github.com/pulumi/pulumi/sdk/v3/proto/go;pulumirpc";

// Output is used to display sub-process output back to a host process. We can't send file descriptors over
// grpc safely (especially if we ever have remote plugins), so this is a small service to allow us to send
// back standard output and error data. For clients that support it, this also exposes a property to say if
// they should behave as if the host is a terminal.
service Output {
    // Returns the capabilities of the output, such as if it is a terminal.
    rpc GetCapabilities(google.protobuf.Empty) returns (GetCapabilitiesResponse) {}

    // Write to the output, if capabilities returned that this was connected to a terminal than the client
    // will likely only write to stdout.
    rpc Write(WriteRequest) returns (google.protobuf.Empty) {}
}

message GetCapabilitiesResponse {
    bool is_terminal = 1; // if we are running in a terminal and should use ANSI codes
}

message WriteRequest {
    oneof data {
        bytes stdout = 1; // a buffer of stdout data.
        bytes stderr = 2; // a buffer of stderr data.
    }
}