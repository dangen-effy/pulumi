// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: pulumi/output.proto

package pulumirpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OutputClient is the client API for Output service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OutputClient interface {
	// Returns the capabilities of the output, such as if it is a terminal.
	GetCapabilities(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCapabilitiesResponse, error)
	// Write to the output.
	Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type outputClient struct {
	cc grpc.ClientConnInterface
}

func NewOutputClient(cc grpc.ClientConnInterface) OutputClient {
	return &outputClient{cc}
}

func (c *outputClient) GetCapabilities(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCapabilitiesResponse, error) {
	out := new(GetCapabilitiesResponse)
	err := c.cc.Invoke(ctx, "/pulumirpc.Output/GetCapabilities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outputClient) Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/pulumirpc.Output/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OutputServer is the server API for Output service.
// All implementations must embed UnimplementedOutputServer
// for forward compatibility
type OutputServer interface {
	// Returns the capabilities of the output, such as if it is a terminal.
	GetCapabilities(context.Context, *emptypb.Empty) (*GetCapabilitiesResponse, error)
	// Write to the output.
	Write(context.Context, *WriteRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedOutputServer()
}

// UnimplementedOutputServer must be embedded to have forward compatible implementations.
type UnimplementedOutputServer struct {
}

func (UnimplementedOutputServer) GetCapabilities(context.Context, *emptypb.Empty) (*GetCapabilitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCapabilities not implemented")
}
func (UnimplementedOutputServer) Write(context.Context, *WriteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedOutputServer) mustEmbedUnimplementedOutputServer() {}

// UnsafeOutputServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OutputServer will
// result in compilation errors.
type UnsafeOutputServer interface {
	mustEmbedUnimplementedOutputServer()
}

func RegisterOutputServer(s grpc.ServiceRegistrar, srv OutputServer) {
	s.RegisterService(&Output_ServiceDesc, srv)
}

func _Output_GetCapabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OutputServer).GetCapabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pulumirpc.Output/GetCapabilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OutputServer).GetCapabilities(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Output_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OutputServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pulumirpc.Output/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OutputServer).Write(ctx, req.(*WriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Output_ServiceDesc is the grpc.ServiceDesc for Output service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Output_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pulumirpc.Output",
	HandlerType: (*OutputServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCapabilities",
			Handler:    _Output_GetCapabilities_Handler,
		},
		{
			MethodName: "Write",
			Handler:    _Output_Write_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pulumi/output.proto",
}
