"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright 2016-2023, Pulumi Corporation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""
import abc
import google.protobuf.empty_pb2
import grpc
import grpc.aio
import typing
import pulumi.output_pb2

class OutputStub:
    """Output is used to display sub-process output back to a host process. We can't send file descriptors over
    grpc safely (especially if we ever have remote plugins), so this is a small service to allow us to send
    back standard output and error data. For clients that support it, this also exposes a property to say if
    they should behave as if the host is a terminal.
    """

    def __init__(self, channel: grpc.Channel) -> None: ...
    GetCapabilities: grpc.UnaryUnaryMultiCallable[
        google.protobuf.empty_pb2.Empty,
        pulumi.output_pb2.GetCapabilitiesResponse,
    ]
    """Returns the capabilities of the output, such as if it is a terminal."""
    Write: grpc.UnaryUnaryMultiCallable[
        pulumi.output_pb2.WriteRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    """Write to the output."""

class OutputServicer(metaclass=abc.ABCMeta):
    """Output is used to display sub-process output back to a host process. We can't send file descriptors over
    grpc safely (especially if we ever have remote plugins), so this is a small service to allow us to send
    back standard output and error data. For clients that support it, this also exposes a property to say if
    they should behave as if the host is a terminal.
    """

    
    def GetCapabilities(
        self,
        request: google.protobuf.empty_pb2.Empty,
        context: grpc.ServicerContext,
    ) -> pulumi.output_pb2.GetCapabilitiesResponse:
        """Returns the capabilities of the output, such as if it is a terminal."""
    
    def Write(
        self,
        request: pulumi.output_pb2.WriteRequest,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """Write to the output."""

def add_OutputServicer_to_server(servicer: OutputServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
