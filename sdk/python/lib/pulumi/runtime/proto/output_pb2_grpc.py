# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from . import output_pb2 as pulumi_dot_output__pb2


class OutputStub(object):
    """Output is used to display sub-process output back to a host process. We can't send file descriptors over
    grpc safely (especially if we ever have remote plugins), so this is a small service to allow us to send
    back standard output and error data. For clients that support it, this also exposes a property to say if
    they should behave as if the host is a terminal.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetCapabilities = channel.unary_unary(
                '/pulumirpc.Output/GetCapabilities',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=pulumi_dot_output__pb2.GetCapabilitiesResponse.FromString,
                )
        self.Write = channel.unary_unary(
                '/pulumirpc.Output/Write',
                request_serializer=pulumi_dot_output__pb2.WriteRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class OutputServicer(object):
    """Output is used to display sub-process output back to a host process. We can't send file descriptors over
    grpc safely (especially if we ever have remote plugins), so this is a small service to allow us to send
    back standard output and error data. For clients that support it, this also exposes a property to say if
    they should behave as if the host is a terminal.
    """

    def GetCapabilities(self, request, context):
        """Returns the capabilities of the output, such as if it is a terminal.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Write(self, request, context):
        """Write to the output.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OutputServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetCapabilities': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCapabilities,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=pulumi_dot_output__pb2.GetCapabilitiesResponse.SerializeToString,
            ),
            'Write': grpc.unary_unary_rpc_method_handler(
                    servicer.Write,
                    request_deserializer=pulumi_dot_output__pb2.WriteRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pulumirpc.Output', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Output(object):
    """Output is used to display sub-process output back to a host process. We can't send file descriptors over
    grpc safely (especially if we ever have remote plugins), so this is a small service to allow us to send
    back standard output and error data. For clients that support it, this also exposes a property to say if
    they should behave as if the host is a terminal.
    """

    @staticmethod
    def GetCapabilities(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pulumirpc.Output/GetCapabilities',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            pulumi_dot_output__pb2.GetCapabilitiesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Write(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pulumirpc.Output/Write',
            pulumi_dot_output__pb2.WriteRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
